
import streamlit as st
from PIL import Image, ImageDraw, ImageFont
from transformers import BlipProcessor, BlipForConditionalGeneration
from openai import OpenAI
from gtts import gTTS
import os
import tempfile
import torch
import random
from datetime import datetime

st.set_page_config(
    page_title="EpopeIA",
    page_icon="https://raw.githubusercontent.com/bcc75/epopeIA/main/lcamoes2.jpeg"
)

# Adicionar CSS para definir o fundo da p√°gina como um pergaminho
st.markdown(
    f'''
    <style>
        body {{
            background-image: url("https://raw.githubusercontent.com/bcc75/epopeIA/main/fundo.jpg");
            background-size: cover;
            background-position: center;
            background-attachment: fixed;
        }}
    </style>
    ''',
    unsafe_allow_html=True
)

st.markdown("""<h1 style="font-size: 2rem; font-family: Helvetica, sans-serif; margin-bottom: 1.5rem;">
  <img src="https://raw.githubusercontent.com/bcc75/epopeIA/main/lcamoes2.jpeg" style="height: 42px; vertical-align: middle; margin-right: 12px;">
  EpopeIA ‚Äî Ver com a Alma
</h1>

<div style="font-size: 1.1rem; font-family: Helvetica, sans-serif; line-height: 1.7; margin-bottom: 2rem;">
  <p>üì∏ <strong>V√™ com os olhos</strong> ‚Äî carrega uma imagem e deixa que a intelig√™ncia artificial a interprete.</p>
  <p>‚úçÔ∏è <strong>Ouve com a alma</strong> ‚Äî a descri√ß√£o torna-se um poema ao estilo de <em>Cam√µes</em>.</p>
  <p>üìú <strong>Poesia assistiva</strong> ‚Äî uma ponte entre a vis√£o e a palavra, entre o passado e o futuro.</p>
  <p>‚õµ <strong>EpopeIA</strong> navega entre pixels e versos, com a alma lusitana sempre ao leme.</p>
</div>""", unsafe_allow_html=True)

def carregar_base(tom):
    if tom == "‚öîÔ∏è √âpico":
        caminho = "camoes_epico.txt"
    else:
        caminho = "camoes_lirico.txt"
    with open(caminho, "r", encoding="utf-8") as f:
        versos = f.read().strip().split("\n\n")
    return random.sample(versos, min(3, len(versos)))

openai_key = os.getenv("OPENAI_API_KEY")
client = OpenAI(api_key=openai_key) if openai_key else None

def traduzir_descricao(desc):
    if not desc:
        return ""
    palavras_ingles = ["sun", "sea", "photo", "image", "man", "woman", "sky", "tree", "people", "walking", "road"]
    if any(p in desc.lower() for p in palavras_ingles):
        traducao = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "Traduz para portugu√™s de Portugal, de forma natural e liter√°ria."},
                {"role": "user", "content": desc}
            ],
            temperature=0.3
        )
        return traducao.choices[0].message.content.strip()
    return desc

def gerar_titulo_poema(descricao):
    prompt_titulo = f"Cria um t√≠tulo √©pico e po√©tico, ao estilo de Cam√µes, para um poema baseado nesta descri√ß√£o: {descricao}"
    resposta_titulo = client.chat.completions.create(
        model="gpt-3.5-turbo",
        messages=[{"role": "system", "content": "Gera um t√≠tulo curto, √©pico e po√©tico."},
                  {"role": "user", "content": prompt_titulo}],
        temperature=0.7,
        max_tokens=20
    )
    return resposta_titulo.choices[0].message.content.strip()

uploaded_file = st.file_uploader("üì∑ Carrega uma imagem (JPG/PNG, at√© 200MB)", type=["jpg", "jpeg", "png"])
st.caption("üõà No iOS, o √°udio pode requerer clique manual. A c√¢mara nem sempre √© ativada por seguran√ßa do browser.")

tom = st.radio("üé≠ Escolhe o tom do poema:", ["‚öîÔ∏è √âpico", "üåπ Rom√¢ntico"])

if uploaded_file and client:
    imagem_path = "imagem_carregada.png"
    with open(imagem_path, "wb") as f:
        f.write(uploaded_file.getbuffer())

    image = Image.open(imagem_path).convert("RGB")
    st.image(image, caption="Imagem carregada", use_container_width=True)

    with st.spinner("üß† A interpretar a imagem..."):
        descricao_ingles = gerar_descricao(image)
        descricao = traduzir_descricao(descricao_ingles)
        st.success(f"Descri√ß√£o: *{descricao}*")

    titulo_poema = gerar_titulo_poema(descricao)

    excertos = carregar_base(tom)
    exemplos = "\n\n".join(excertos)

    prompt = f"""Tu √©s Lu√≠s de Cam√µes. A tua miss√£o √© transformar uma descri√ß√£o visual num poema com tom {tom.replace("‚öîÔ∏è", "").replace("üåπ", "").strip().lower()}, escrito em portugu√™s do s√©culo XVI.

Inspira-te nestes exemplos reais do teu estilo:

{exemplos}

Agora, escreve um poema com um verso por linha, e com quebras de linha entre estrofes. Usa linguagem cl√°ssica, rica, com ritmo, e vocabul√°rio do s√©culo XVI.

Descri√ß√£o:
{descricao}

Poema:
""" 

    with st.spinner("‚úçÔ∏è A gerar poema camoniano..."):
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "Escreve como Lu√≠s de Cam√µes. Usa vocabul√°rio do s√©culo XVI, met√°foras cl√°ssicas, ritmo l√≠rico portugu√™s. Adapta o tom consoante o pedido."},
                {"role": "user", "content": prompt}
            ],
            temperature=0.7,
            max_tokens=400
        )
        poema = response.choices[0].message.content.strip()

        data_hora = datetime.now().strftime("%d/%m/%Y %H:%M")

        st.markdown(f"üìú **{titulo_poema}**")
        st.text(poema)
        st.markdown(f"*epopeIA ‚Äî {data_hora}*")

        with st.spinner("üéß A gerar voz..."):
            audio_path = gTTS(poema, lang="pt", tld="pt").save("poema.mp3")
            st.audio("poema.mp3", format="audio/mp3")
            with open("poema.mp3", "rb") as f:
                st.download_button("‚¨áÔ∏è Descarregar √°udio", f, file_name="camoes_poema.mp3")

        # Bot√£o para descarregar poema em texto
        caminho_txt = "poema.txt"
        with open(caminho_txt, "w", encoding="utf-8") as f:
            f.write(f"{titulo_poema}\n\n{poema}\n\nepopeIA ‚Äî {data_hora}")
        
        with open(caminho_txt, "rb") as f:
            st.download_button("üìú Descarregar poema em texto", f, file_name="poema.txt", mime="text/plain")
