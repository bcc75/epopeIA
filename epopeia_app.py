import streamlit as st
from PIL import Image
from transformers import BlipProcessor, BlipForConditionalGeneration
from openai import OpenAI
from gtts import gTTS
import os
import tempfile
import torch
import random
from datetime import datetime

st.set_page_config(
    page_title="EpopeIA",
    page_icon="https://raw.githubusercontent.com/bcc75/epopeIA/main/lcamoes2.jpeg"
)

# Estilo visual
st.markdown(
    """
    <style>
    .stApp {
        background-image: url("https://raw.githubusercontent.com/bcc75/epopeIA/main/fundep.jpg");
        background-size: cover;
        background-position: center;
        background-attachment: fixed;
    }
    section[data-testid="stRadio"] label span {
        font-size: 1.2rem !important;
        font-weight: bold;
    }
    </style>
    """,
    unsafe_allow_html=True
)

st.markdown("""
<h1 style="font-size: 2.8rem; font-family: Arial, sans-serif; margin-bottom: 1.5rem; text-align: center;">
  <img src="https://raw.githubusercontent.com/bcc75/epopeIA/main/icon-lcamoes.png" style="height: 42px; vertical-align: middle; margin-right: 12px;">
  Epope<i>IA</i> ‚Äî Ver com a Alma
</h1>
<div style="font-size: 1.3rem; font-family: Arial, sans-serif; line-height: 1.7; margin-bottom: 2rem; text-align: center;">
  <p><strong>Transformar imagens em poesia camoniana com a Intelig√™ncia Artificial</strong></p>
</div>
  <hr style="height:2px;border-width:0;color:gray;background-color:gray">
<div style="font-size: 1.1rem; font-family: Arial, sans-serif; line-height: 1.7; margin-bottom: 2rem;">
  <p> üì∏  <strong>  Explora:</strong> a ess√™ncia da imagem e deixa que a intelig√™ncia artificial a interprete e descreva.</p>
  <p> ‚úçÔ∏è  <strong>  Descobre:</strong> a poesia escondida em cada imagem, sob o olhar de <em>Cam√µes</em>.</p>
  <p> üìú  <strong>  Cria:</strong> novos mundos de imagens e palavras, onde a mem√≥ria guia e o sonho avan√ßa.</p>
  <p> ‚õµÔ∏è  <strong>  Navega:</strong> entre <i>pixels</i> e versos, com a alma lusa sempre ao leme.</p>
    <hr style="height:2px;border-width:0;color:gray;background-color:gray">
</div>""", unsafe_allow_html=True)

def carregar_base(tom):
    caminho = "camoes_epico.txt" if tom == "‚öîÔ∏è √âpico" else "camoes_lirico.txt"
    with open(caminho, "r", encoding="utf-8") as f:
        versos = f.read().strip().split("EXEMPLO")
    return random.sample(versos, min(3, len(versos)))

openai_key = os.getenv("OPENAI_API_KEY")
client = OpenAI(api_key=openai_key) if openai_key else None

@st.cache_resource(show_spinner=False)
def load_blip():
    processor = BlipProcessor.from_pretrained("Salesforce/blip-image-captioning-base")
    model = BlipForConditionalGeneration.from_pretrained("Salesforce/blip-image-captioning-base").to("cuda" if torch.cuda.is_available() else "cpu")
    return processor, model

processor, model = load_blip()

def gerar_descricao(imagem):
    inputs = processor(imagem, return_tensors="pt").to("cuda" if torch.cuda.is_available() else "cpu")
    with torch.no_grad():
        out = model.generate(**inputs)
    return processor.decode(out[0], skip_special_tokens=True)

def traduzir_descricao(desc):
    if not desc: return ""
    traducao = client.chat.completions.create(
        model="gpt-3.5-turbo",
        messages=[
            {"role": "system", "content": "Traduz esta descri√ß√£o para portugu√™s de Portugal, de forma natural e liter√°ria."},
            {"role": "user", "content": desc}
        ],
        temperature=0.3
    )
    return traducao.choices[0].message.content.strip()

def gerar_titulo_poema(descricao):
    prompt_titulo = f"Cria um t√≠tulo √©pico e po√©tico, ao estilo de Cam√µes, para um poema baseado nesta descri√ß√£o: {descricao}"
    resposta_titulo = client.chat.completions.create(
        model="gpt-3.5-turbo",
        messages=[
            {"role": "system", "content": "Gera um t√≠tulo curto, √©pico e po√©tico."},
            {"role": "user", "content": prompt_titulo}
        ],
        temperature=0.7,
        max_tokens=40
    )
    return resposta_titulo.choices[0].message.content.strip()

def gerar_audio_gtts(texto):
    tts = gTTS(texto, lang="pt", tld="pt")
    with tempfile.NamedTemporaryFile(delete=False, suffix=".mp3") as out:
        tts.save(out.name)
        return out.name

uploaded_file = st.file_uploader("üì∑ Carrega uma imagem (JPG/PNG, at√© 200MB)", type=["jpg", "jpeg", "png"])
st.caption("üì≤ No iOS, o √°udio pode requerer clique manual. A c√¢mara nem sempre √© ativada por seguran√ßa do browser.")
tom = st.radio(" üé≠ Escolhe o tom do poema:", ["‚öîÔ∏è √âpico", "üåπ L√≠rico"], index=1)

if uploaded_file and client:
    image = Image.open(uploaded_file).convert("RGB")
    st.image(image, caption="Imagem carregada", use_container_width=True)

    with st.spinner("üß¨ A interpretar a imagem..."):
        desc_en = gerar_descricao(image)
        desc_pt = traduzir_descricao(desc_en)
        st.success(f"Descri√ß√£o: *{desc_pt}*")

    titulo_poema = gerar_titulo_poema(desc_pt)
    exemplos = "\n\n".join(carregar_base(tom))

    prompt = f"""Transforma a seguinte descri√ß√£o visual num poema escrito por Lu√≠s de Cam√µes, respeitando rigorosamente a m√©trica, a forma e o estilo da sua poesia cl√°ssica.
Se for **√©pico**, escreve apenas uma oitava real, ou seja, 8 versos decassil√°bicos com rima ABABABCC, isto √©, devem ter rima cruzada nos seis primeiros e emparelhada nos dois √∫ltimos. Deves escrever apenas uma √∫nica oitava, sem mais estrofes, evocando feitos gloriosos, viagens, o mar, a p√°tria, o engenho humano e a mitologia cl√°ssica. O tom deve ser solene, grandioso e heroico, com linguagem elevada e cad√™ncia narrativa inspirada em *Os Lus√≠adas*.
Se for **l√≠rico**, escreve um **soneto cl√°ssico italiano** (14 versos organizados em 4 estrofes fixas com 2 quartetos e 2 tercetos) com rima ABBA ABBA CDC DCD, explorando sentimentos como amor idealizado, saudade, abandono, sofrimento e a impossibilidade da felicidade amorosa. D√° √™nfase √† tens√£o entre o desejo e a raz√£o, √† beleza da mulher inating√≠vel, ao prazer e √† dor que o amor provoca.
A linguagem deve ser em portugu√™s do s√©culo XVI, rica em met√°foras, invers√µes sint√°ticas e musicalidade.
Inspira-te nestes exemplos camonianos:

{exemplos}

Descri√ß√£o da imagem:
{desc_pt}

Poema:"""

    with st.spinner("‚úçÔ∏è A gerar poema camoniano..."):
        resposta = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "Escreve como Lu√≠s de Cam√µes, respeitando forma, m√©trica e estilo do s√©culo XVI."},
                {"role": "user", "content": prompt}
            ],
            temperature=0.7,
            max_tokens=400
        )
        poema = resposta.choices[0].message.content.strip()
        data_hora = datetime.now().strftime("%d/%m/%Y %H:%M")

        st.markdown(f"üìú **{titulo_poema}**")
        st.text(poema)
        st.markdown(f"*epopeIA ‚Äî {data_hora}*")

        with st.spinner("üó£Ô∏è A gerar voz..."):
            audio_path = gerar_audio_gtts(poema)
            st.audio(audio_path, format="audio/mp3")
            with open(audio_path, "rb") as f:
                st.download_button("üéß Descarregar √°udio", f, file_name="camoes_poema.mp3")

        caminho_txt = "poema.txt"
        with open(caminho_txt, "w", encoding="utf-8") as f:
            f.write(f"{titulo_poema}\n\n{poema}\n\nepopeIA ‚Äî {data_hora}")
        with open(caminho_txt, "rb") as f:
            st.download_button("üìú Descarregar poema em texto", f, file_name="poema.txt", mime="text/plain")
