import streamlit as st
from PIL import Image, ImageDraw, ImageFont
from transformers import BlipProcessor, BlipForConditionalGeneration
from openai import OpenAI
from gtts import gTTS
import os
import tempfile
import torch
import random
from datetime import datetime

st.set_page_config(
    page_title="EpopeIA",
    page_icon="https://raw.githubusercontent.com/bcc75/epopeIA/main/lcamoes2.jpeg"
)

# Adicionar CSS para fundo de pergaminho e estilo dos radiobuttons
st.markdown(
    """
    <style>
    .stApp {
        background-image: url("https://raw.githubusercontent.com/bcc75/epopeIA/main/fundep.jpg");
        background-size: cover;
        background-position: center;
        background-attachment: fixed;
    }

section[data-testid="stRadio"] label span {
    font-size: 1.2rem !important;
    font-weight: bold;
}
</style>
    """,
    unsafe_allow_html=True
)


st.markdown("""<h1 style="font-size: 2rem; font-family: Times New Roman, sans-serif; margin-bottom: 1.5rem;">
  <img src="https://raw.githubusercontent.com/bcc75/epopeIA/main/lcamoes2.jpeg" style="height: 42px; vertical-align: middle; margin-right: 12px;">
  Epope<i>IA</i> ‚Äî Ver com a Alma
</h1>

<div style="font-size: 1.1rem; font-family: Times New Roman, sans-serif; line-height: 1.7; margin-bottom: 2rem;">
  <p>üì∏ <strong>Abre o olhar da m√°quina:</strong> carrega uma imagem e deixa que a intelig√™ncia artificial a interprete e descreva.</p>
  <p>‚úçÔ∏è <strong>Ouve com a alma:</strong> da descri√ß√£o nasce um poema inspirado em <em>Cam√µes</em>.</p>
  <p>üìú <strong>Poesia assistiva:</strong> uma ponte entre a vis√£o e a palavra, entre o passado e o futuro.</p>
  <p>‚õµÔ∏è <strong>Epope<i>IA</i>:</strong> navega entre pixeis e versos, com a alma lusa sempre ao leme.</p>
</div>""", unsafe_allow_html=True)

def carregar_base(tom):
    if tom == "‚öîÔ∏è √âpico":
        caminho = "camoes_epico.txt"
    else:
        caminho = "camoes_lirico.txt"
    with open(caminho, "r", encoding="utf-8") as f:
        versos = f.read().strip().split("\n\n")
    return random.sample(versos, min(3, len(versos)))

openai_key = os.getenv("OPENAI_API_KEY")
client = OpenAI(api_key=openai_key) if openai_key else None

@st.cache_resource(show_spinner=False)
def load_blip():
    processor = BlipProcessor.from_pretrained("Salesforce/blip-image-captioning-base")
    model = BlipForConditionalGeneration.from_pretrained("Salesforce/blip-image-captioning-base").to("cuda" if torch.cuda.is_available() else "cpu")
    return processor, model

processor, model = load_blip()

def gerar_descricao(imagem):
    inputs = processor(imagem, return_tensors="pt").to("cuda" if torch.cuda.is_available() else "cpu")
    with torch.no_grad():
        out = model.generate(**inputs)
    return processor.decode(out[0], skip_special_tokens=True)

def traduzir_descricao(desc):
    if not desc:
        return ""
    traducao = client.chat.completions.create(
        model="gpt-3.5-turbo",
        messages=[
            {"role": "system", "content": "Traduz esta descri√ß√£o para portugu√™s de Portugal, de forma natural e liter√°ria."},
            {"role": "user", "content": desc}
        ],
        temperature=0.3
    )
    return traducao.choices[0].message.content.strip()

def gerar_titulo_poema(descricao):
    prompt_titulo = f"Cria um t√≠tulo √©pico e po√©tico, ao estilo de Cam√µes, para um poema baseado nesta descri√ß√£o: {descricao}"
    resposta_titulo = client.chat.completions.create(
        model="gpt-3.5-turbo",
        messages=[
            {"role": "system", "content": "Gera um t√≠tulo curto, √©pico e po√©tico."},
            {"role": "user", "content": prompt_titulo}
        ],
        temperature=0.7,
        max_tokens=20
    )
    return resposta_titulo.choices[0].message.content.strip()

def gerar_audio_gtts(texto):
    tts = gTTS(texto, lang="pt", tld="pt")
    with tempfile.NamedTemporaryFile(delete=False, suffix=".mp3") as out:
        tts.save(out.name)
        return out.name

uploaded_file = st.file_uploader("üì∑ Carrega uma imagem (JPG/PNG, at√© 200MB)", type=["jpg", "jpeg", "png"])
st.caption("üì≤ No iOS, o √°udio pode requerer clique manual. A c√¢mara nem sempre √© ativada por seguran√ßa do browser.")

tom = st.radio(" üé≠ Escolhe o tom do poema:", ["‚öîÔ∏è √âpico", "üåπ Rom√¢ntico"], index=1)

if uploaded_file and client:
    image = Image.open(uploaded_file).convert("RGB")
    st.image(image, caption="Imagem carregada", use_container_width=True)

    with st.spinner("üß¨ A interpretar a imagem..."):
        descricao_ingles = gerar_descricao(image)
        descricao = traduzir_descricao(descricao_ingles)
        st.success(f"Descri√ß√£o: *{descricao}*")

    titulo_poema = gerar_titulo_poema(descricao)

    excertos = carregar_base(tom)
    exemplos = "\n\n".join(excertos)

    prompt = f"""Tu √©s Lu√≠s de Cam√µes. A tua miss√£o √© transformar uma descri√ß√£o visual num poema com tom {tom.replace("\u2694\ufe0f", "").replace("\ud83c\udf39", "").strip().lower()}, escrito em portugu√™s do s√©culo XVI.

Inspira-te nestes exemplos reais do teu estilo:

{exemplos}

Agora, escreve um poema com um verso por linha, e com quebras de linha entre estrofes. Usa linguagem cl√°ssica, rica, com ritmo, e vocabul√°rio do s√©culo XVI.

Descri√ß√£o:
{descricao}

Poema:
"""

    with st.spinner("‚úçÔ∏è A gerar poema camoniano..."):
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "Escreve como Lu√≠s de Cam√µes. Usa vocabul√°rio do s√©culo XVI, met√°foras cl√°ssicas, ritmo l√≠rico portugu√™s. Adapta o tom consoante o pedido."},
                {"role": "user", "content": prompt}
            ],
            temperature=0.7,
            max_tokens=400
        )
        poema = response.choices[0].message.content.strip()
        data_hora = datetime.now().strftime("%d/%m/%Y %H:%M")

        st.markdown(f"üìú **{titulo_poema}**")
        st.text(poema)
        st.markdown(f"*epopeIA ‚Äî {data_hora}*")

        with st.spinner("üó£Ô∏è A gerar voz..."):
            audio_path = gerar_audio_gtts(poema)
            st.audio(audio_path, format="audio/mp3")
            with open(audio_path, "rb") as f:
                st.download_button("üéß Descarregar √°udio", f, file_name="camoes_poema.mp3")

        caminho_txt = "poema.txt"
        with open(caminho_txt, "w", encoding="utf-8") as f:
            f.write(f"{titulo_poema}\n\n{poema}\n\nepopeIA ‚Äî {data_hora}")

        with open(caminho_txt, "rb") as f:
            st.download_button("üìú Descarregar poema em texto", f, file_name="poema.txt", mime="text/plain")
